definitions:
  # the names of the functions - we use this to generate the code and to register the functions in
  # the javascript class
  ifunction: "csx_${generator.prefix}_${class_name}_${func_name}"
  sfunction: "csx_${generator.prefix}_${class_name}_${func_name}"
  constructor: "csx_${generator.prefix}_${class_name}_constructor"
conversions:
  # some times you want to use a special native type when converting from spidermonkey to native
  # the most common case would be from JS-boolean to bool. Using "bool" will fail here since we
  # pass the address to the conversion method, and a JSBool is defined as an integer in spidermonkey
  native_types:
    "@std::vector<std::basic_string.*>.>.>": "std::vector<std::string>"
    "@std::vector<int.*>.>": "std::vector<int>"
    "@cocos2d::Map<std::basic_string.*,": "cocos2d::Map<std::string,"
  to_native:
    # jsval to int
    int: "int ${out_value} = *(int *)cx->top()"
    "int*": "int* ${out_value} = (int *)cx->top()"
    "unsigned int": "unsigned int ${out_value} = *(unsigned int*)cx->top()"
    "unsigned int*": "unsigned int* ${out_value} = (unsigned int*)cx->top()"
    "unsigned char": "unsigned char ${out_value} = *(unsigned char*)cx->top()"
    "unsigned char*": "unsigned char* ${out_value} = (unsigned char)cx->top()"
    short: "short ${out_value} = *(short*)cx->top()"
    "short*": "short* ${out_value} = (short*)cx->top()"
    "unsigned short": "unsigned short ${out_value} = *(unsigned short*)cx->top()"
    "unsigned short*": "unsigned short* ${out_value} = (unsigned short*)cx->top()"
    char: "char ${out_value} = *(char*)cx->top()"
    "char*": "char* ${out_value} = (char*)cx->top()"
    bool: "bool ${out_value} = *(bool*)cx->top()"
    float: "float ${out_value} = *(float*)cx->top()"
    "float*": "float* ${out_value} = (float*)cx->top()"
    double: "double ${out_value} = *(double*)cx->top()"
    "double*": "double* ${out_value} = (double*)cx->top()"
    long: "long ${out_value} = *(long*)cx->top()"
    "long*": "long* ${out_value} = (long*)cx->top()"
    "unsigned long": "unsigned long ${out_value} = *(unsigned long*)cx->top()"
    "ssize_t": "ssize_t ${out_value} = *(ssize_t*)cx->top()"
    "long long": "long long ${out_value} = *(long long*)cx->top()"
    "std::string": "std::string ${out_value} = ((string*)cx->top()).c_str()"
    "char*": "char* ${out_value} = (char*)cx->top()"
    "Point": "Point ${out_value} = *(Point*)cx->top()"
    "Rect": "Rect ${out_value} = *(Rect*)cx->top()"
    "Size": "Size ${out_value} = *(Size*)cx->top()"
    "Color4B": "Color4B ${out_value} = *(Color4B*)cx->top()"
    "Color4F": "Color4F ${out_value} = *(Color4F*)cx->top()"
    "Color3B": "Color3B ${out_value} = *(Color3B*)cx->top()"
    "Array*": "Array* ${out_value} = (Array*)cx->top()"
    "Dictionary*": "Dictionary* ${out_value} = (Dictionary*)cx->top()"
    "AffineTransform": "AffineTransform ${out_value} = *(AffineTransform*)cx->top()"
    "FontDefinition":  "FontDefinition ${out_value} = *(FontDefinition*)cx->top()"
    "String*": "String* ${out_value} = (String*)cx->top()"
    "void*": "void* ${out_value} = cx->top()"
    "_MipmapInfo*": "_MipmapInfo* ${out_value} = (_MipmapInfo*)cx->top()"
    "kmMat4": "kmMat4 ${out_value} = *(kmMat4*)cx->top()"
    "kmVec3": "kmVec3 ${out_value} = *(kmVec3*)cx->top()"
    "Tile*": "Tile* ${out_value} = (Tile*)cx->top()"
    "TMXTileFlags_*": "(TMXTileFlags_*) ${out_value} = (TMXTileFlags_*)cx->top()"
    "sImageTGA*": "sImageTGA* ${out_value} = (sImageTGA*)cx->top()"
    "sParticle*": "sParticle* ${out_value} = (sParticle*)cx->top()"
    "_ccArray*": "sParticle* ${out_value} = (sParticle*)cx->top()"
    "@Vector<.*>": "ok &= jsval_to_ccvector(cx, ${in_value}, &${out_value})"
    "@Map<std::basic_string.*>": "ok &= jsval_to_ccmap_string_key(cx, ${in_value}, &${out_value})"
    "Value": "ok &= jsval_to_ccvalue(cx, ${in_value}, &${out_value})"
    "ValueMap": "ok &= jsval_to_ccvaluemap(cx, ${in_value}, &${out_value})"
    "ValueMapIntKey": "ok &= jsval_to_ccvaluemapintkey(cx, ${in_value}, &${out_value})"
    "ValueVector": "ok &= jsval_to_ccvaluevector(cx, ${in_value}, &${out_value})"
    "@vector<std::basic_string.*>": "ok &= jsval_to_std_vector_string(cx, ${in_value}, &${out_value})"
    "@vector<int.*>": "ok &= jsval_to_std_vector_int(cx, ${in_value}, &${out_value})"
    object: "${ntype} ${out_value} = (${ntype})cx->top()"

  from_native:
    # int to jsval
    int: "${out_value} = int32_to_jsval(cx, ${in_value})"
    "unsigned int": "${out_value} = uint32_to_jsval(cx, ${in_value})"
    "unsigned short": "${out_value} = ushort_to_jsval(cx, ${in_value})"
    "unsigned char": "${out_value} = uint32_to_jsval(cx, ${in_value})"
    "long long": "${out_value} = long_long_to_jsval(cx, ${in_value})"
    "std::string": "${out_value} = std_string_to_jsval(cx, ${in_value})"
    "char*": "${out_value} = c_string_to_jsval(cx, ${in_value})"
    bool: "${out_value} = BOOLEAN_TO_JSVAL(${in_value})"
    float: "${out_value} = DOUBLE_TO_JSVAL(${in_value})"
    double: "${out_value} = DOUBLE_TO_JSVAL(${in_value})"
    long: "${out_value} = long_to_jsval(cx, ${in_value})"
    "unsigned long": "${out_value} = ulong_to_jsval(cx, ${in_value})"
    "ssize_t": "${out_value} = ssize_to_jsval(cx, ${in_value})"
    "Point": "${out_value} = ccpoint_to_jsval(cx, ${in_value})"
    "Rect": "${out_value} = ccrect_to_jsval(cx, ${in_value})"
    "Size": "${out_value} = ccsize_to_jsval(cx, ${in_value})"
    "Color4B": "${out_value} = cccolor4b_to_jsval(cx, ${in_value})"
    "Color4F": "${out_value} = cccolor4f_to_jsval(cx, ${in_value})"
    "Color3B": "${out_value} = cccolor3b_to_jsval(cx, ${in_value})"
    "Array*": "${out_value} = ccarray_to_jsval(cx, ${in_value})"
    "Dictionary*": "${out_value} = ccdictionary_to_jsval(cx, ${in_value})"
    "AffineTransform": "${out_value} = ccaffinetransform_to_jsval(cx, ${in_value})"
    "FontDefinition": "${out_value} = FontDefinition_to_jsval(cx, ${in_value})"
    "String*": "${out_value} = std_string_to_jsval(cx, ${in_value}->getCString())"
    "@Vector<.*>": "${out_value} = ccvector_to_jsval(cx, ${in_value})"
    "@Map<std::basic_string.*>": "cx->push((void*)&ret)"
    "Value": "cx->push((void*)&ret)"
    "ValueMap": "cx->push((void*)&ret)"
    "ValueMapIntKey": "cx->push((void*)&ret)"
    "ValueVector": "cx->push((void*)&ret)"
    "@vector<std::basic_string.*>": "cx->push((void*)&ret)"
    "@vector<int.*>": "cx->push((void*)ret)"
    object: "cx->push((void*)ret)"
